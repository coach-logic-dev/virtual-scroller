{"version":3,"sources":["../source/ScrollableContainer.js"],"names":["getScrollY","getScreenHeight","getScreenWidth","ScrollableContainer","element","scrollTop","scrollX","scrollY","scrollTo","offsetWidth","offsetHeight","scrollHeight","scrollableContainerTop","getBoundingClientRect","top","scrollableContainerBorderTopWidth","clientTop","listener","addEventListener","removeEventListener","onResize","unobserve","ResizeObserver","resizeObserver","entries","entry","observe","unlistenWindowResize","ScrollableWindowContainer","window","document","documentElement","borderTopWidth","body"],"mappings":"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","sourcesContent":["import {\n\tgetScrollY,\n\tgetScreenHeight,\n\tgetScreenWidth\n} from './DOM'\n\nexport default class ScrollableContainer {\n\tconstructor(element) {\n\t\tthis.element = element\n\t}\n\n\tgetScrollY() {\n\t\treturn this.element.scrollTop\n\t}\n\n\tscrollTo(scrollX, scrollY) {\n\t\tthis.element.scrollTo(scrollX, scrollY)\n\t}\n\n\tgetWidth() {\n\t\treturn this.element.offsetWidth\n\t}\n\n\tgetHeight() {\n\t\t// if (!this.element && !precise) {\n\t\t// \treturn getScreenHeight()\n\t\t// }\n\t\treturn this.element.offsetHeight\n\t}\n\n\tgetContentHeight() {\n\t\treturn this.element.scrollHeight\n\t}\n\n\tgetTopOffset(element) {\n\t\tconst scrollableContainerTop = this.element.getBoundingClientRect().top\n\t\tconst scrollableContainerBorderTopWidth = this.element.clientTop\n\t\tconst top = element.getBoundingClientRect().top\n\t\treturn (top - scrollableContainerTop) + this.getScrollY() - scrollableContainerBorderTopWidth\n\t}\n\n\t// isVisible() {\n\t// \tconst { top, bottom } = this.element.getBoundingClientRect()\n\t// \treturn bottom > 0 && top < getScreenHeight()\n\t// }\n\n\taddScrollListener(listener) {\n\t\tthis.element.addEventListener('scroll', listener)\n\t\treturn () => this.element.removeEventListener('scroll', listener)\n\t}\n\n\tonResize(onResize) {\n\t\t// Could somehow track DOM Element size.\n\t\t// For now, `scrollableContainer` is supposed to have constant width and height.\n\t\t// (unless window is resized).\n\t\t// https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver\n\t\t// https://web.dev/resize-observer/\n\t\tlet unobserve\n\t\tif (typeof ResizeObserver !== 'undefined') {\n\t\t\tconst resizeObserver = new ResizeObserver((entries) => {\n\t\t\t\tfor (const entry of entries) {\n\t\t\t\t\t// // If `entry.contentBoxSize` property is supported by the web browser.\n\t\t\t\t\t// if (entry.contentBoxSize) {\n\t\t\t\t\t// \t// https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserverEntry/contentBoxSize\n\t\t\t\t\t// \tconst width = entry.contentBoxSize.inlineSize\n\t\t\t\t\t// \tconst height = entry.contentBoxSize.blockSize\n\t\t\t\t\t// }\n\t\t\t\t\treturn onResize()\n\t\t\t\t}\n\t\t\t})\n\t\t\tresizeObserver.observe(this.element)\n\t\t\tunobserve = () => resizeObserver.unobserve(this.element)\n\t\t}\n\t\t// I guess, if window is resized, `onResize()` will be triggered twice:\n\t\t// once for window resize, and once for the scrollable container resize.\n\t\t// But `onResize()` also has an internal check: if the size didn't change\n\t\t// then it's not run.\n\t\tconst unlistenWindowResize = new ScrollableWindowContainer().onResize(onResize)\n\t\treturn () => {\n\t\t\tif (unobserve) {\n\t\t\t\tunobserve()\n\t\t\t}\n\t\t\tunlistenWindowResize()\n\t\t}\n\t}\n}\n\nexport class ScrollableWindowContainer extends ScrollableContainer {\n\tconstructor() {\n\t\tsuper(window)\n\t}\n\n\tgetScrollY() {\n\t\treturn getScrollY()\n\t}\n\n\tgetWidth() {\n\t\treturn getScreenWidth()\n\t}\n\n\tgetHeight() {\n\t\treturn getScreenHeight()\n\t}\n\n\tgetContentHeight() {\n\t\treturn document.documentElement.scrollHeight\n\t}\n\n\tgetTopOffset(element) {\n\t\tconst borderTopWidth = document.clientTop || document.body.clientTop || 0\n\t\treturn element.getBoundingClientRect().top + this.getScrollY() - borderTopWidth\n\t}\n\n\tonResize(onResize) {\n\t\twindow.addEventListener('resize', onResize)\n\t\treturn () => window.removeEventListener('resize', onResize)\n\t}\n\n\t// isVisible() {\n\t// \treturn true\n\t// }\n}"],"file":"ScrollableContainer.js"}